# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/60_peakmaps.ipynb (unless otherwise specified).

__all__ = ['get_cube_slices', 'plot_cube_slices']

# Cell

import numpy as np
import scipy.interpolate as sip
import scipy.signal as ssg
from maxrf4u import DataStack, HotmaxAtlas
from dask.diagnostics import ProgressBar
import matplotlib.pyplot as plt
import skimage.exposure as ske
import skimage.morphology as skm


def get_cube_slices(datastack_file, tail_clip=0.05):
    '''Computes fitted and clipped Gaussian peak shapes for all hotmax pixels.

    Returns: `peak_slices`, `y_gauss_list` '''

    # read stuff from datastack
    ds = DataStack(datastack_file)

    x_keVs = ds.read('maxrf_energies')
    hotmax_pixels = ds.read('hotmax_pixels')
    hotmax_spectra = ds.read('hotmax_spectra')
    hotmax_baselines = ds.read('hotmax_baselines')

    peak_idxs = hotmax_pixels[:,2]

    # get slices by fitting gaussian to corresponding hotmax spectrum and baseline
    y_gauss_list = []
    peak_slices = []

    # step 1: create tail clipped gaussians
    for i, peak_idx in enumerate(peak_idxs):

        y_hot = hotmax_spectra[i]
        baseline = hotmax_baselines[i]
        y_gauss_fit, baseline = _fit_gaussian(x_keVs, y_hot, peak_idx, baseline=baseline)

        y_gauss_flat =  y_gauss_fit - baseline

        # clip peak tails below tail_clip level
        mask = np.ones_like(y_gauss_flat)
        is_below_clip = y_gauss_flat < tail_clip
        mask[is_below_clip] = 0
        y_gauss_fit_clipped = y_gauss_fit * mask

        y_gauss_list.append(y_gauss_fit_clipped)

        # peak slices
        peak_domain_idxs = np.argwhere(y_gauss_fit_clipped)
        i = peak_domain_idxs.min()
        j = peak_idx
        k = peak_domain_idxs.max()

        peak_slices.append([i,j,k])

    return peak_slices, y_gauss_list



def _gaussian(x, x0, sigma):
    '''Normal distribution around `x0` with standard deviation `sigma`.'''

    y = np.exp(-0.5 * ((x - x0) / sigma)**2)

    return y


def _fit_gaussian(x, y, peak_idx, rel_height=0.2, baseline=None):
    '''Fit single gaussian distribution at `rel_height`.

    Returns: `y_gauss`, `baseline`
    '''

    # just a single peak
    [widths], [width_height], [left_ips], [right_ips] = ssg.peak_widths(y, [peak_idx], rel_height=rel_height)

    # create energy interpolation
    keV_ipol = sip.interp1d(np.arange(len(x)), x)

    left_x = keV_ipol(left_ips)
    right_x = keV_ipol(right_ips)

    # pick smallest half width at rel_height
    dx_left = left_x - x[peak_idx]
    dx_right = right_x - x[peak_idx]

    dx = sorted([dx_left, dx_right])[0]

    # create baseline
    if baseline is None:
        baseline = np.zeros_like(y)

    y_norm = (width_height - baseline[peak_idx]) / (y[peak_idx] - baseline[peak_idx])

    # assert that y_norm is positive
    assert y_norm > 0, f"Can't fit Gaussian for peak below baseline for peak index {peak_idx}."

    # calculate corresponding sigma
    sigma = np.sqrt(-dx**2 / (2 * np.log(y_norm)))

    # calculate gaussian with baseline
    y_gauss = (y[peak_idx] - baseline[peak_idx]) * _gaussian(x, x[peak_idx], sigma) + baseline

    return y_gauss, baseline


# Plotting

def plot_cube_slices(datastack_file, ax=None, tail_clip=0.05, xlim=[-1, 24]):

    # read data
    ds = DataStack(datastack_file)
    x_keVs = ds.read('maxrf_energies')
    y_max = ds.read('maxrf_maxspectrum')

    if ax is None:
        fig, ax = plt.subplots(figsize=[9, 4])

    y_gauss_list = get_cube_slices(datastack_file, tail_clip=tail_clip)[1]

    for y_gauss in y_gauss_list:

        ax.fill_between(x_keVs, y_gauss)

    ax.plot(x_keVs, y_max, color='r', alpha=0.5, label='max spectrum')
    ax.fill_between(x_keVs, y_max, color='r', alpha=0.2)

    twax = _add_hotlines_ticklabels(datastack_file, ax)

    ax.set_xlim(xlim)
    twax.set_xlim(xlim)

    ax.set_xlabel('energy [keV]')
    ax.set_ylabel('intensity [#counts]')

    ax.legend()

    plt.tight_layout()

    return fig, ax, twax



def _add_hotlines_ticklabels(datastack_file, ax):
    '''Utility function. Adds hotlines and tick labels to plot `ax`.

    '''
    # read hotlines data
    ds = DataStack(datastack_file)
    x_keVs = ds.read('maxrf_energies')
    peak_idxs = ds.read('hotmax_pixels')[:, 2]

    ymin, ymax = ax.get_ylim()

    twax = ax.twiny()

    twax.vlines(x_keVs[peak_idxs], 0, ymax, color='r', alpha=0.2, zorder=9-30)
    twax.set_xlim(ax.get_xlim())

    twax.set_xticks(x_keVs[peak_idxs])
    twax.set_xticklabels(range(len(peak_idxs)), fontsize=6, color='r')
    twax.tick_params(color=[1, 0.5, 0.5], pad=0)

    twax.set_ylim([ymin, ymax])

    return twax
# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/40_peak-pattern-puzzle.ipynb (unless otherwise specified).

__all__ = ['get_patterns', 'colorize', 'plot_patterns', 'all_elements', 'eoi']

# Cell

from maxrf4u import HotmaxAtlas
import re
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import mendeleev
import moseley as mos
import numpy as np


# all elements
all_elements = ['#H', '#He', '#Li', '#Be', '#B', '#C', 'N', 'O', 'F', '#Ne', 'Na', 'Mg', 'Al',
                'Si', 'P', 'S', 'Cl', '#Ar', 'K', 'Ca', '#Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe',
                'Co', 'Ni', 'Cu', 'Zn', '#Ga', '#Ge', 'As', '#Se', 'Br', '#Kr', '#Rb', 'Sr',
                '#Y', '#Zr', '#Nb', '#Mo', '#Tc', '#Ru', '#Rh', '#Pd', 'Ag', 'Cd', '#In', 'Sn',
                '#Sb', '#Te', 'I', '#Xe', '#Cs', 'Ba', '#La', '#Hf', '#Ta', '#W', '#Re', '#Os',
                '#Ir', '#Pt', '#Au', 'Hg', '#Tl', 'Pb', '#Bi', '#Po', '#At', '#Rn', '#Fr', '#Ra',
                '#Ac', '#Rf', '#Db', '#Sg', '#Bh', '#Hs', '#Mt', '#Ds', '#Rg', '#Cn', '#Nh',
                '#Fl', '#Mc', '#Lv', '#Ts', '#Og']

# elements of interest (to me)
eoi = [e for e in all_elements if not '#' in e]


def get_patterns(elements, tube_keV=22):
    '''Returns sorted pattern dict list, according to alpha peak energy. '''

    ptrn_dict_list = []

    for elem in elements:

        spectrum = mos.XFluo(elem, tube_keV=tube_keV, min_prom=0.01)

        peak_order = np.argsort(spectrum.peak_intensities)[::-1]

        alpha_keV = spectrum.peak_energies[peak_order][0]
        peaks_x = spectrum.peak_energies[peak_order]
        peaks_y = spectrum.peak_intensities[peak_order]

        peaks_xy = np.c_[peaks_x, peaks_y]

        color = colorize(elem)

        name = mendeleev.element(elem).name

        ptrn_dict = {'elem': elem, 'name': name, 'peaks_xy': peaks_xy, 'color': color}

        ptrn_dict_list.append(ptrn_dict)

    # sort according to alpha energy
    alpha_keVs = [p['peaks_xy'][0, 0] for p in ptrn_dict_list]
    indices = np.argsort(alpha_keVs)

    ptrn_list = [ptrn_dict_list[i] for i in indices]

    return ptrn_list

def colorize(elem=None, eoi=None):
    '''Pick fixed color from nice color map for elements of interest. '''

    if eoi is None:

        # select elements of interest
        all_elements = ['#H', '#He', '#Li', '#Be', '#B', '#C', 'N', 'O', 'F', '#Ne', 'Na', 'Mg', 'Al',
                        'Si', 'P', 'S', 'Cl', '#Ar', 'K', 'Ca', '#Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe',
                        'Co', 'Ni', 'Cu', 'Zn', '#Ga', '#Ge', 'As', '#Se', 'Br', '#Kr', '#Rb', 'Sr',
                        '#Y', '#Zr', '#Nb', '#Mo', '#Tc', '#Ru', '#Rh', '#Pd', 'Ag', 'Cd', '#In', 'Sn',
                        '#Sb', '#Te', 'I', '#Xe', '#Cs', 'Ba', '#La', '#Hf', '#Ta', '#W', '#Re', '#Os',
                        '#Ir', '#Pt', '#Au', 'Hg', '#Tl', 'Pb', '#Bi', '#Po', '#At', '#Rn', '#Fr', '#Ra',
                        '#Ac', '#Rf', '#Db', '#Sg', '#Bh', '#Hs', '#Mt', '#Ds', '#Rg', '#Cn', '#Nh',
                        '#Fl', '#Mc', '#Lv', '#Ts', '#Og']

        eoi = [e for e in all_elements if not '#' in e]

    # tab20x2 color map
    tab20 = cm.tab20(np.arange(20))[:,0:3]
    colors = np.r_[tab20[::-1], tab20[::-1]**0.6]

    # custom
    special_colors = {'Pb': (0.2, 0.2, 0.2),
                      'Cu': (0.1, 0.9, 0.3),
                      'Fe': (0.9, 0.1, 0.1),
                      'S': (1.0, 0.9, 0.1)}

    for e in special_colors.keys():
        colors[eoi.index(e)] = special_colors[e]

    if elem is not None:
        assert elem in eoi, f'Element not in: {eoi}'
        colors = colors[eoi.index(elem)]

    return colors



def plot_patterns(ptrn_list, ax=None):

    n_ptrns = len(ptrn_list)

    elements = [p['elem'] for p in ptrn_list]
    element_labels = [f'{mendeleev.element(e).name} ({e})' for e in elements]

    tab20 = cm.tab20(np.arange(20))[:,0:3]
    colors = np.r_[tab20[::-1], tab20[::-1]**0.6]


    special_colors = {'Pb': (0.2, 0.2, 0.2),
                      'Cu': (0.1, 0.9, 0.3),
                      'Fe': (0.9, 0.1, 0.1),
                      'S': (1.0, 0.9, 0.1)}

    for elem in special_colors.keys():
        if elem in elements:
            colors[elements.index(elem)] = special_colors[elem]

    if ax is None:

        fig, ax = plt.subplots(figsize=[9, 8])#0.5*n_ptrns])

    for i, ptrn in enumerate(ptrn_list):

        peaks_x, peaks_y = ptrn['peaks_xy'].T

        left_x = min(peaks_x)
        right_x = max(peaks_x)

        ones = np.ones_like(peaks_y)

        ax.scatter(peaks_x, i * ones, s=15, color=colors[i])
        ax.plot([left_x, right_x], [i, i], color=colors[i], alpha=0.3)
        ax.scatter(peaks_x[0], i, marker='s', s=40, color=colors[i])

    ax.set_yticks(range(n_ptrns))
    ax.set_yticklabels(element_labels)
    ax.set_ylim([-n_ptrns, n_ptrns])


    #ax.set_title('Common element peak patterns')
    #ax.set_ylabel('Usual suspects')
    #ax.set_xlabel('Energy [keV]')

    plt.tight_layout()

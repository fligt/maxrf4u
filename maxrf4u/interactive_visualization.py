# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/91_interactive-plotting.ipynb (unless otherwise specified).

__all__ = ['make_gridbox_widget', 'export_interactive_html']

# Cell

import json
import os

import IPython

from IPython.display import display

from ipywidgets.embed import embed_minimal_html, embed_data
from ipywidgets import Layout, HBox, VBox, GridBox, jslink, HTML
from ipywidgets import Widget

from ipyleaflet import (Map, projections, ImageOverlay, Rectangle, ZoomControl, FullScreenControl,
                        DrawControl, WKTLayer, Popup)

from maxrf4u import img_to_url


def make_gridbox_widget(images, titles):

    # close all widgets to avoid ever growing html export file size
    print('Closing all widgets...')
    Widget.close_all()

    # convert numpy arrays to color compressed png/base64 url strings to be used in html output
    print('Compressing images...')
    shapes = [im.shape for im in images]
    urls = [img_to_url(im)[0] for im in images]
    lengths = [len(u) for u in urls]
    size = sum(lengths)

    print(f'Ready! Total string length: {size / 1e6:.02f} MB')

    layout = Layout(width='300px', height='300px')
    grid_layout = Layout(grid_template_columns="repeat(5, 305px)")

    # make map widgets

    map_widgets = []
    for url in urls:

        m = Map(center=[150, 150], zoom=0, crs=projections['Simple'], layout=layout,
                    scroll_wheel_zoom=True, min_zoom=-10)#, interpolation='nearest')
        imo = ImageOverlay(url=url, bounds=[[0, 0], [300, 300]])
        fsc = FullScreenControl()

        m.add(imo)
        m.add(fsc)
        m.remove(m.layers[0]) # hack to remove world map

        map_widgets.append(m)

    # sync map widgets centers and zoom levels via browser javascript
    first, rest = map_widgets[0], map_widgets[1:]
    for r in rest:
        jslink([first, 'center'],[r, 'center'])
        jslink([first, 'zoom'],[r, 'zoom'])

    # titles

    title_widgets = []
    for t in titles:

        tw = HTML(f'<center><bf>{t}</bf></center>') # ?
        title_widgets.append(tw)

    # combine titles and maps
    vboxes = []
    for title_widget, map_widget in zip(title_widgets, map_widgets):

        vbox = VBox([title_widget, map_widget], layout=layout)
        vboxes.append(vbox)

    gridbox = GridBox(vboxes, layout=grid_layout)

    return gridbox


def export_interactive_html(widget, basename, ext='_interactive.html',
                            save_dir='/media/frank/b2/dore-viz/',
                            web_dir='https://f002.backblazeb2.com/file/dore-viz/'):

    assert os.path.exists(save_dir), f'Error: {save_dir} not found! Is your storage mounted?'

    filepath = os.path.join(save_dir, f'{basename}{ext}')

    print(f'Saving interactive html to mounted cloud storage...')
    embed_minimal_html(filepath, widget)
    print('Ready!')

    size_MB = os.path.getsize(filepath) // 1e6

    cloud_url = f'{web_dir}{basename}{ext}'
    link = f'<a href="{cloud_url}">Click this link for interactive plot ({size_MB} MB)</a>'

    return link


